#!/usr/bin/env python

# this default system uses 13 features extracted from the given 17 features and trains them using SVM regression with an RBF kernel
# optimizing parameters using gird search
# the output for the test set are labels - 1,2,3 - indicating the quality of translation

# usage:
#           ./default > output

import optparse
import sys
import numpy as np
from sklearn.svm import SVR
from sklearn.grid_search import ParameterGrid
from sklearn.metrics import mean_absolute_error, make_scorer
from sklearn.cross_validation import cross_val_score

optparser = optparse.OptionParser()

optparser.add_option("-s", "--source", dest="source_sent", default="data-train/en-es_source.train", help="English source sentences")
optparser.add_option("-t", "--target", dest="target_sent", default="data-train/en-es_target.train", help="Spanish target sentences")
optparser.add_option("-u", "--train_features", dest="train_features", default="data-train/default_features.train", help="13 baseline features")
optparser.add_option("-v", "--train_labels", dest="train_labels", default="data-train/en-es_score.train", help="13 baseline features")
optparser.add_option("-w", "--test_features", dest="test_features", default="data-test/default_features.test", help="13 baseline features")

(opts, _) = optparser.parse_args()

train_features = np.loadtxt(opts.train_features, dtype=float, delimiter=" ", comments=None)
train_labels = np.loadtxt(opts.train_labels, dtype=float, delimiter=" ", comments=None)
test_features = np.loadtxt(opts.test_features, dtype=float, delimiter=" ", comments=None)

parameters = {'kernel': ['rbf'], 'C': [0.1, 1.0], 'epsilon': [0.2, 0.5]}

clf_obj = SVR
best_score = None
scorer = make_scorer(mean_absolute_error, greater_is_better = False)
for param in ParameterGrid(parameters):
    clf = clf_obj(**param)

    one_score = cross_val_score(clf, train_features, train_labels, cv=5, scoring = scorer)
    score = one_score.mean()
   
    sys.stderr.write("parameters = %s, score = %.6f \n" % (repr(param), -1*score))
            
    if (best_score is None or best_score < score): 
        best_param = param
        best_score = score
        best_clf = clf

pred_labels = best_clf.fit(train_features, train_labels).predict(test_features)

for label in pred_labels:
    sys.stdout.write("%d" % pred_labels[label])
    sys.stdout.write("\n")
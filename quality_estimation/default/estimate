#!/usr/bin/env python
import optparse
import sys

optparser = optparse.OptionParser()

optparser.add_option("-s", "--source", dest="source_sent", default="../data/train/en-es_source.train", help="English source sentences")
optparser.add_option("-t", "--target", dest="target_sent", default="../data/train/en-es_target.train", help="Spanish target sentences")
optparser.add_option("-u", "--features", dest="features", default="../data/train/baseline_features.train", help="13 baseline features")

optparser.add_option("-v", "--top_threshold", dest="top_threshold", default="10", type="float", help="Top threshold")
optparser.add_option("-w", "--mid_threshold", dest="mid_threshold", default="5", help="Middle threshold")

optparser.add_option("-a", "--avg_tok_len", dest="avg_tok_len", default=1.0, type="float", help="Average source token length weight")
optparser.add_option("-b", "--lm_source", dest="lm_source", default=1.0, type="float", help="Source language model probability weight")
optparser.add_option("-c", "--lm_target", dest="lm_target", default=1.0, type="float", help="Target language model probability weight")
optparser.add_option("-d", "--target_avg_word_app", dest="target_avg_word_app", default=1.0, type="float", help="Number of occurrences of the target word within the target hypothesis (averaged for all words in the hypothesis - type/token ratio) weight")
optparser.add_option("-e", "--avg_trans_per_source", dest="avg_trans_per_source", default=1.0, type="float", help="Average number of translations per source word in the sentence (as given by IBM 1 table thresholded such that prob(t|s) > 0.2) weight")
optparser.add_option("-f", "--avg_trans_per_source_inv", dest="avg_trans_per_source_inv", default=-1.0, type="float", help="Average number of translations per source word in the sentence (as given by IBM 1 table thresholded such that prob(t|s) > 0.01) weighted by the inverse frequency of each word in the source corpus weight")
optparser.add_option("-g", "--unigrams_q1", dest="unigrams_q1", default=1.0, type="float", help="Percentage of unigrams in quartile 1 of frequency (lower frequency words) in a corpus of the source language (SMT training corpus) weight")
optparser.add_option("-i", "--unigrams_q4", dest="unigrams_q4", default=1.0, type="float", help="Percentage of unigrams in quartile 4 of frequency (higher frequency words) in a corpus of the source language weight")
optparser.add_option("-j", "--bigrams_q1", dest="bigrams_q1", default=1.0, type="float", help="Percentage of bigrams in quartile 1 of frequency of source words in a corpus of the source language weight")
optparser.add_option("-k", "--bigrams_q4", dest="bigrams_q4", default=1.0, type="float", help="Percentage of bigrams in quartile 4 of frequency of source words in a corpus of the source language weight")
optparser.add_option("-l", "--trigrams_q1", dest="trigrams_q1", default=1.0, type="float", help="Percentage of trigrams in quartile 1 of frequency of source words in a corpus of the source language weight")
optparser.add_option("-m", "--trigrams_q4", dest="trigrams_q4", default=1.0, type="float", help="Percentage of trigrams in quartile 4 of frequency of source words in a corpus of the source language weight")
optparser.add_option("-n", "--perc_corpus_unigrams", dest="perc_corpus_unigrams", default=1.0, type="float", help="percentage of unigrams in the source sentence seen in a corpus (SMT training corpus) weight")

(opts, _) = optparser.parse_args()

weights = {'avg_tok_len'				: float(opts.avg_tok_len),
           'lm_source'     				: float(opts.lm_source),
           'lm_target' 					: float(opts.lm_target),
           'target_avg_word_app' 		: float(opts.target_avg_word_app),
           'avg_trans_per_source' 		: float(opts.avg_trans_per_source),
           'avg_trans_per_source_inv'	: float(opts.avg_trans_per_source_inv),
           'unigrams_q1' 				: float(opts.unigrams_q1),
           'unigrams_q4' 				: float(opts.unigrams_q4),
           'bigrams_q1' 				: float(opts.bigrams_q1),
           'bigrams_q4' 				: float(opts.bigrams_q4),
           'trigrams_q1' 				: float(opts.trigrams_q1),
           'trigrams_q4' 				: float(opts.trigrams_q4),
           'perc_corpus_unigrams' 		: float(opts.perc_corpus_unigrams) }

all_triples = [[sentence.strip() for sentence in triple] for triple in zip(open(opts.source_sent), open(opts.target_sent), open(opts.features))]

for (source, target, features) in all_triples:
	features = features.split()
	score = 0.0
	for (i, j) in enumerate(weights):
		score += float(features[i]) * weights[j]
	if score > opts.top_threshold:
		print 1
	elif score > opts.mid_threshold:
		print 2
	else:
		print 3
	










#!/usr/bin/env python

from __future__ import print_function

import optparse
import sys
import numpy as np
from sklearn import datasets
from sklearn.cross_validation import train_test_split
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import mean_absolute_error, make_scorer, mean_squared_error
from sklearn.metrics import classification_report
from sklearn.svm import SVC, SVR

optparser = optparse.OptionParser()
optparser.add_option("-s", "--source", dest="source_sent", default="../data/train/en-es_source.train", help="English source sentences")
optparser.add_option("-t", "--target", dest="target_sent", default="../data/train/en-es_target.train", help="Spanish target sentences")
optparser.add_option("-u", "--train_features", dest="train_features", default="added_overall.train", help="17 baseline features")
optparser.add_option("-v", "--train_labels", dest="train_labels", default="../data/train/en-es_score.train", help="17 baseline features")
optparser.add_option("-w", "--test_features", dest="test_features", default="added_overall.test", help="17 baseline features")
optparser.add_option("-o", "--test_labels", dest="test_labels", default="../data/test/en-es_pred_score.test", help="17 baseline features")
(opts, _) = optparser.parse_args()

X_train = np.loadtxt(opts.train_features, dtype=float, comments=None)
y_train = np.loadtxt(opts.train_labels, dtype=float, comments=None)
X_test = np.loadtxt(opts.test_features, dtype=float, comments=None)

tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-2, 1e-3, 1e-4], 'C': [1, 10, 100, 1000]}]

clf = GridSearchCV(SVC(C=1), tuned_parameters, cv=5, scoring='mean_absolute_error')

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

for prediction in y_pred:
    print(int(prediction))

#!/usr/bin/env python
import optparse
import sys

# Usage:
#	./extract_training_features > baseline_features.train
# Description:
#	Used to extract out the 13 features that will be provided
# 	by the default system as training features.
#	The idea is to cut out features f1, f2, f16 and f17 because
# 	these can be found dynamically by the students to 

# Features:
# 	f1 - number of tokens in the source sentence
#	f2 - number of tokens in the target sentence
#	f3 - average source token length
#	f4 - LM probability of source sentence
# 	f5 - LM probability of target sentence
#	f6 - number of occurrences of the target word within the target hypothesis (averaged for all words in the hypothesis - type/token ratio)
#	f7 - average number of translations per source word in the sentence (as given by IBM 1 table thresholded such that prob(t|s) > 0.2)
#	f8 - average number of translations per source word in the sentence (as given by IBM 1 table thresholded such that prob(t|s) > 0.01) weighted by the inverse frequency of each word in the source corpus
#	f9 - percentage of unigrams in quartile 1 of frequency (lower frequency words) in a corpus of the source language (SMT training corpus)
#	f10 - percentage of unigrams in quartile 4 of frequency (higher frequency words) in a corpus of the source language
#	f11 - percentage of bigrams in quartile 1 of frequency of source words in a corpus of the source language
#	f12 - percentage of bigrams in quartile 4 of frequency of source words in a corpus of the source language
#	f13 - percentage of trigrams in quartile 1 of frequency of source words in a corpus of the source language
#	f14 - percentage of trigrams in quartile 4 of frequency of source words in a corpus of the source language
#	f15 - percentage of unigrams in the source sentence seen in a corpus (SMT training corpus)
#	f16 - number of punctuation marks in the source sentence
#	f17 - number of punctuation marks in the target sentence

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="all_features.train", help="Full baseline features list (input)")
optparser.add_option("-o", "--output", dest="output", default="baseline_features.train", help="Reduced default features list (output)")
(opts, _) = optparser.parse_args()

all_features = [pair.split() for pair in open(opts.input)]

my_file = open(opts.output, 'w')

for (f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17) in all_features:
  my_file.write(f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8 + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14 + " " + f15 + "\n")

my_file.close()